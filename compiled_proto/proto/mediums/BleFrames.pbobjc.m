// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ble_frames.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "BleFrames.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GNCMDisconnectionFrame);
GPBObjCClassDeclaration(GNCMIntroductionFrame);
GPBObjCClassDeclaration(GNCMPacketAcknowledgementFrame);

#pragma mark - GNCMBleFramesRoot

@implementation GNCMBleFramesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - GNCMBleFramesRoot_FileDescriptor

static GPBFileDescriptor *GNCMBleFramesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"location.nearby.mediums"
                                                 objcPrefix:@"GNCM"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum GNCMSocketVersion

GPBEnumDescriptor *GNCMSocketVersion_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownSocketVersion\000V1\000V2\000";
    static const int32_t values[] = {
        GNCMSocketVersion_UnknownSocketVersion,
        GNCMSocketVersion_V1,
        GNCMSocketVersion_V2,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GNCMSocketVersion)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GNCMSocketVersion_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GNCMSocketVersion_IsValidValue(int32_t value__) {
  switch (value__) {
    case GNCMSocketVersion_UnknownSocketVersion:
    case GNCMSocketVersion_V1:
    case GNCMSocketVersion_V2:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GNCMSocketControlFrame

@implementation GNCMSocketControlFrame

@dynamic hasType, type;
@dynamic hasIntroduction, introduction;
@dynamic hasDisconnection, disconnection;
@dynamic hasPacketAcknowledgement, packetAcknowledgement;

typedef struct GNCMSocketControlFrame__storage_ {
  uint32_t _has_storage_[1];
  GNCMSocketControlFrame_ControlFrameType type;
  GNCMIntroductionFrame *introduction;
  GNCMDisconnectionFrame *disconnection;
  GNCMPacketAcknowledgementFrame *packetAcknowledgement;
} GNCMSocketControlFrame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GNCMSocketControlFrame_ControlFrameType_EnumDescriptor,
        .number = GNCMSocketControlFrame_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GNCMSocketControlFrame__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "introduction",
        .dataTypeSpecific.clazz = GPBObjCClass(GNCMIntroductionFrame),
        .number = GNCMSocketControlFrame_FieldNumber_Introduction,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GNCMSocketControlFrame__storage_, introduction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "disconnection",
        .dataTypeSpecific.clazz = GPBObjCClass(GNCMDisconnectionFrame),
        .number = GNCMSocketControlFrame_FieldNumber_Disconnection,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GNCMSocketControlFrame__storage_, disconnection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "packetAcknowledgement",
        .dataTypeSpecific.clazz = GPBObjCClass(GNCMPacketAcknowledgementFrame),
        .number = GNCMSocketControlFrame_FieldNumber_PacketAcknowledgement,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GNCMSocketControlFrame__storage_, packetAcknowledgement),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GNCMSocketControlFrame class]
                                     rootClass:[GNCMBleFramesRoot class]
                                          file:GNCMBleFramesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GNCMSocketControlFrame__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum GNCMSocketControlFrame_ControlFrameType

GPBEnumDescriptor *GNCMSocketControlFrame_ControlFrameType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownControlFrameType\000Introduction\000Dis"
        "connection\000PacketAcknowledgement\000";
    static const int32_t values[] = {
        GNCMSocketControlFrame_ControlFrameType_UnknownControlFrameType,
        GNCMSocketControlFrame_ControlFrameType_Introduction,
        GNCMSocketControlFrame_ControlFrameType_Disconnection,
        GNCMSocketControlFrame_ControlFrameType_PacketAcknowledgement,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GNCMSocketControlFrame_ControlFrameType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GNCMSocketControlFrame_ControlFrameType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GNCMSocketControlFrame_ControlFrameType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GNCMSocketControlFrame_ControlFrameType_UnknownControlFrameType:
    case GNCMSocketControlFrame_ControlFrameType_Introduction:
    case GNCMSocketControlFrame_ControlFrameType_Disconnection:
    case GNCMSocketControlFrame_ControlFrameType_PacketAcknowledgement:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GNCMIntroductionFrame

@implementation GNCMIntroductionFrame

@dynamic hasServiceIdHash, serviceIdHash;
@dynamic hasSocketVersion, socketVersion;

typedef struct GNCMIntroductionFrame__storage_ {
  uint32_t _has_storage_[1];
  GNCMSocketVersion socketVersion;
  NSData *serviceIdHash;
} GNCMIntroductionFrame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceIdHash",
        .dataTypeSpecific.clazz = Nil,
        .number = GNCMIntroductionFrame_FieldNumber_ServiceIdHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GNCMIntroductionFrame__storage_, serviceIdHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "socketVersion",
        .dataTypeSpecific.enumDescFunc = GNCMSocketVersion_EnumDescriptor,
        .number = GNCMIntroductionFrame_FieldNumber_SocketVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GNCMIntroductionFrame__storage_, socketVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GNCMIntroductionFrame class]
                                     rootClass:[GNCMBleFramesRoot class]
                                          file:GNCMBleFramesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GNCMIntroductionFrame__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GNCMDisconnectionFrame

@implementation GNCMDisconnectionFrame

@dynamic hasServiceIdHash, serviceIdHash;

typedef struct GNCMDisconnectionFrame__storage_ {
  uint32_t _has_storage_[1];
  NSData *serviceIdHash;
} GNCMDisconnectionFrame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceIdHash",
        .dataTypeSpecific.clazz = Nil,
        .number = GNCMDisconnectionFrame_FieldNumber_ServiceIdHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GNCMDisconnectionFrame__storage_, serviceIdHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GNCMDisconnectionFrame class]
                                     rootClass:[GNCMBleFramesRoot class]
                                          file:GNCMBleFramesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GNCMDisconnectionFrame__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GNCMPacketAcknowledgementFrame

@implementation GNCMPacketAcknowledgementFrame

@dynamic hasServiceIdHash, serviceIdHash;
@dynamic hasReceivedSize, receivedSize;

typedef struct GNCMPacketAcknowledgementFrame__storage_ {
  uint32_t _has_storage_[1];
  int32_t receivedSize;
  NSData *serviceIdHash;
} GNCMPacketAcknowledgementFrame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceIdHash",
        .dataTypeSpecific.clazz = Nil,
        .number = GNCMPacketAcknowledgementFrame_FieldNumber_ServiceIdHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GNCMPacketAcknowledgementFrame__storage_, serviceIdHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "receivedSize",
        .dataTypeSpecific.clazz = Nil,
        .number = GNCMPacketAcknowledgementFrame_FieldNumber_ReceivedSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GNCMPacketAcknowledgementFrame__storage_, receivedSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GNCMPacketAcknowledgementFrame class]
                                     rootClass:[GNCMBleFramesRoot class]
                                          file:GNCMBleFramesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GNCMPacketAcknowledgementFrame__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
